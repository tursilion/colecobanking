diff -rup sdcc-3.5.0/sdas/linksrc/aslink.h sdcc/sdas/linksrc/aslink.h
--- sdcc-3.5.0/sdas/linksrc/aslink.h	2014-12-30 22:17:18.000000000 +0800
+++ sdcc/sdas/linksrc/aslink.h	2015-07-01 21:43:34.493411900 +0800
@@ -1281,8 +1281,8 @@ extern  VOID            erpdmp3(FILE *fp
 extern  VOID            rele3(void);
 extern  VOID            reloc3(int c);
 extern  VOID            relt3(void);
-extern  VOID            relr3(void);
-extern  VOID            relp3(void);
+extern  int             relr3(void);
+extern  int             relp3(void);
 extern  VOID            relerr3(char *str);
 extern  VOID            relerp3(char *str);
 
Only in sdcc/sdas/linksrc/: aslink.vcxproj.user
Only in sdcc/sdas/linksrc/: asxxxx_config.h
Only in sdcc/sdas/linksrc/: Debug
diff -rup sdcc-3.5.0/sdas/linksrc/lkihx.c sdcc/sdas/linksrc/lkihx.c
--- sdcc-3.5.0/sdas/linksrc/lkihx.c	2011-04-23 19:19:27.000000000 +0800
+++ sdcc/sdas/linksrc/lkihx.c	2015-06-24 23:09:06.000000000 +0800
@@ -276,3 +276,8 @@ ihxExtendedLinearAddress(a_uint a)
     hexPageOverrun = 0;
     lastHexAddr = 0;
 }
+
+// called when a new area is detected to emit the area name
+VOID ihxAreaTag(const char *psz) {
+	fprintf(ofp, "#AREA:%s\n", psz);
+}
diff -rup sdcc-3.5.0/sdas/linksrc/lkrloc3.c sdcc/sdas/linksrc/lkrloc3.c
--- sdcc-3.5.0/sdas/linksrc/lkrloc3.c	2014-07-09 14:06:32.000000000 +0800
+++ sdcc/sdas/linksrc/lkrloc3.c	2015-07-02 20:54:31.156262300 +0800
@@ -32,6 +32,8 @@
 
 #include "aslink.h"
 
+extern VOID ihxAreaTag(const char *psz);
+
 /*)Module       lkrloc3.c
  *
  *      The module lkrloc3.c contains the functions which
@@ -47,8 +49,8 @@
  *              VOID    relerp3()
  *              VOID    reloc3()
  *              VOID    relp3()
- *              VOID    relr3()
- *              VOID    relt3()
+ *              int     relr3()			// tursi's fault it's int
+ *              int     relt3()			// tursi's fault it's int
  *
  *      lkrloc3.c the local variable errmsg3[].
  *
@@ -82,6 +84,10 @@
 VOID
 reloc3(int c)
 {
+	static char oldaindex[32] = "";
+	int aindex = -1;
+	int outputHdr = 0;
+
         switch(c) {
 
         case 'T':
@@ -89,11 +95,13 @@ reloc3(int c)
                 break;
 
         case 'R':
-                relr3();
+                aindex = relr3();
                 break;
 
         case 'P':
-                relp3();
+				// I don't know if this has any meaning at all... doesn't seem to, so don't break it
+                //aindex = relp3();
+				relp3();
                 break;
 
         case 'E':
@@ -106,6 +114,49 @@ reloc3(int c)
                 break;
 
         }
+
+		{
+			// TURSI HACK - makes output non-standard, for MakeMegaCart
+			// we need to test the string name, not the index, because
+			// different files can be in different sections but have
+			// the same index when it all comes together - indexes
+			// are LOCAL to the file.
+			// Still a potential bug if a file ends with the same region
+			// name as the next file begins, but they tend to start with GSINIT
+			// and end with GSFINAL (or around that), so should be okay.
+			struct areax **a;
+			/*
+				* Get area list
+				*/
+			a = hp->a_list;
+
+			if ((oldaindex[0] == '\0') && (aindex >= 0)) {
+				outputHdr = 1;
+			} else {
+				if ((aindex >= 0) && (oldaindex >= 0)) {
+//					fprintf(stderr, "HEADERS: %s / %s\n", a[aindex]->a_bap->a_id, oldaindex);
+					if (strcmp(a[aindex]->a_bap->a_id, oldaindex)) {
+						outputHdr = 1;
+					}
+				}
+			}
+
+			if (outputHdr) {
+				// called when a new area is detected to emit the area name
+				if (ofp == NULL) {
+					// should only see this once, at the beginning, the file is opened below.
+					// that's fine, the first section emitted should be in the based of the
+					// multicart (header) anyway. (If it's a banked region, just put something before it)
+					fprintf(stderr, "No FP - skipping emission of #AREA:%s\n", a[aindex]->a_bap->a_id);
+				} else {
+					fprintf(ofp, "#AREA:%s\n", a[aindex]->a_bap->a_id);
+//					fprintf(stderr, "#AREA:%s (%x)\n", a[aindex]->a_bap->a_id, ofp);
+				}
+				strncpy(oldaindex, a[aindex]->a_bap->a_id, 32);
+				oldaindex[31] = '\0';
+			}
+			// end Tursi hack
+		}
 }
 
 
@@ -166,7 +217,7 @@ relt3(void)
         }
 }
 
-/*)Function     VOID    relr3()
+/*)Function     INT     relr3() - tursi hacked to return aindex (-1 if invalid)
  *
  *      The function relr3() evaluates a R line read by
  *      the linker.  The R line data is combined with the
@@ -257,7 +308,7 @@ relt3(void)
  *
  */
 
-VOID
+int
 relr3(void)
 {
         int mode;
@@ -279,7 +330,7 @@ relr3(void)
         if (eval() != (R3_WORD | R3_AREA) || eval()) {
                 fprintf(stderr, "R input error\n");
                 lkerr++;
-                return;
+                return -1;
         }
 
         /*
@@ -289,10 +340,10 @@ relr3(void)
         if (aindex >= hp->h_narea) {
                 fprintf(stderr, "R area error\n");
                 lkerr++;
-                return;
+                return -1;
         }
 
-        /*
+		/*
          * Select Output File
          */
         if (oflag != 0) {
@@ -351,7 +402,7 @@ relr3(void)
                         if (rindex >= hp->h_nsym) {
                                 fprintf(stderr, "R symbol error\n");
                                 lkerr++;
-                                return;
+                                return aindex;
                         }
                         reli = symval(s[rindex]);
                 }
@@ -365,7 +416,7 @@ relr3(void)
                         if (rindex >= hp->h_narea) {
                                 fprintf(stderr, "R area error\n");
                                 lkerr++;
-                                return;
+                                return aindex;
                         }
                         reli = a[rindex]->a_addr;
                 }
@@ -576,6 +627,8 @@ relr3(void)
         if (oflag != 0) {
                 lkout(1);
         }
+
+		return aindex;
 }
 
 char *errmsg3[] = {
@@ -595,7 +648,7 @@ char *errmsg3[] = {
 };
 
 
-/*)Function VOID        relp3()
+/*)Function int        relp3() - hacked by tursi to return aindex
  *
  *      The function relp3() evaluates a P line read by
  *      the linker.  The P line data is combined with the
@@ -649,7 +702,7 @@ char *errmsg3[] = {
  *
  */
 
-VOID
+int
 relp3()
 {
         int aindex, rindex;
@@ -679,7 +732,7 @@ relp3()
         if (aindex >= hp->h_narea) {
                 fprintf(stderr, "P area error\n");
                 lkerr++;
-                return;
+                return -1;
         }
 
         /*
@@ -697,14 +750,14 @@ relp3()
                         if (rindex >= hp->h_nsym) {
                                 fprintf(stderr, "P symbol error\n");
                                 lkerr++;
-                                return;
+                                return aindex;
                         }
                         relv = symval(s[rindex]);
                 } else {
                         if (rindex >= hp->h_narea) {
                                 fprintf(stderr, "P area error\n");
                                 lkerr++;
-                                return;
+                                return aindex;
                         }
                         relv = a[rindex]->a_addr;
                 }
@@ -718,13 +771,15 @@ relp3()
         if (aindex >= hp->h_narea) {
                 fprintf(stderr, "P area error\n");
                 lkerr++;
-                return;
+                return aindex;
         }
         sdp.s_areax = a[aindex];
         sdp.s_area = sdp.s_areax->a_bap;
         sdp.s_addr = adb_2b(0, 4);
         if (sdp.s_area->a_addr & 0xFF || sdp.s_addr & 0xFF)
                 relerp3("Page Definition Boundary Error");
+
+		return aindex;
 }
 
 /*)Function VOID        rele3()
Only in sdcc/sdas/linksrc/: Release
